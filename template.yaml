# AWS SAM 模板版本声明
AWSTemplateFormatVersion: '2010-09-09'
# 使用 SAM 转换器，支持无服务器应用程序模型
Transform: AWS::Serverless-2016-10-31

# 定义模板参数
Parameters:
  # 环境参数，用于区分开发/测试/生产环境
  Environment:
    Type: String
    Default: prod
    AllowedValues: [dev, test, prod]
    Description: 部署环境（开发/测试/生产）
  # 项目名称参数
  ProjectName:
    Type: String
    Default: japanese-study
    Description: 项目名称
  # 数据库名称参数
  DBName:
    Type: String
    Default: japanese_study
    Description: 数据库名称
  # 数据库用户名参数（安全考虑，不会在控制台显示）
  DBUsername:
    Type: String
    NoEcho: true
    Description: 数据库用户名
  # 数据库密码参数（安全考虑，不会在控制台显示）
  DBPassword:
    Type: String
    NoEcho: true
    Description: 数据库密码

# 全局配置，适用于所有 Lambda 函数
Globals:
  Function:
    Timeout: 30                # 函数超时时间：30秒
    MemorySize: 256           # 内存分配：256MB
    Runtime: python3.9        # 运行时环境：Python 3.9
    Environment:              # 环境变量配置
      Variables:
        FLASK_APP: application.py
        FLASK_ENV: !Ref Environment
        S3_BUCKET: !Ref StaticBucket
        CLOUDFRONT_DOMAIN: !Sub https://${StaticDistribution.DomainName}
    Tags:                     # 资源标签
      Project: !Ref ProjectName
      Environment: !Ref Environment
    AutoPublishAlias: live    # 自动发布的别名
    Architectures:            # CPU 架构
      - x86_64

Resources:
  # API Lambda 函数配置
  ApiFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: python3.9
      BuildProperties:        # 构建属性
        Exclude:             # 排除的文件
          - "**/__pycache__/**"
          - "**/.git/**"
          - "**/.env"
          - "**/.env.development"
          - "**/.env.test"
          - "**/*.pyc"
          - "run.sh"
          - "bk/**"
          - ".aws-sam/**"
          - ".vscode/**"
          - ".idea/**"
          - "**/*.log"
          - "**/*.wav"
          - "**/*.mp3"
          - "**/*.webm"
          - "**/*.ogg"
          - "**/*.tmp"
          - "temp_*"
          - "**/*.bak"
          - "**/*.backup"
          - "**/*backup*"
          - "env.json"
          - "local_test.sh"
          - "connect-db.sh"
          - "migrations/**"
          - "venv/**"
          - ".DS_Store"
        Include:             # 包含的文件
          - "templates/**"
          - "static/**"
          - ".env.prod"
    Properties:
      FunctionName: !Sub ${ProjectName}-${Environment}-api  # 函数名称
      CodeUri: ./            # 代码位置
      Handler: lambda_handler.handler  # 处理函数
      Layers:               # Lambda 层配置
        - !Sub "arn:aws:lambda:${AWS::Region}:753240598075:layer:LambdaAdapterLayerX86:16"
      Events:               # API Gateway 事件配置
        RootPath:          # 根路径配置
          Type: Api
          Properties:
            Path: /
            Method: ANY
        ProxyPath:         # 代理路径配置
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY
      VpcConfig:           # VPC 配置
        SecurityGroupIds:
          - !Ref ApiSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
      Policies:            # IAM 策略配置
        - AWSLambdaVPCAccessExecutionRole
        - AWSLambdaBasicExecutionRole
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:      # S3 操作权限
                - s3:GetObject
                - s3:ListBucket
                - s3:PutObject
                - s3:DeleteObject
              Resource:    # S3 资源访问控制
                - !Sub ${StaticBucket.Arn}
                - !Sub ${StaticBucket.Arn}/*
            - Effect: Allow
              Action: execute-api:Invoke
              Resource: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:*/*/*/*
      Tags:               # 资源标签
        Name: !Sub ${ProjectName}-${Environment}-api
        Function: api-handler
      Environment:        # 环境变量
        Variables:
          POSTGRES_HOST: !GetAtt DbCluster.Endpoint.Address
          POSTGRES_PORT: !GetAtt DbCluster.Endpoint.Port
          POSTGRES_DB: !Ref DBName
          POSTGRES_USER: !Ref DBUsername
          POSTGRES_PASSWORD: !Ref DBPassword
          S3_BUCKET: !Ref StaticBucket
          CLOUDFRONT_DOMAIN: !Sub https://${StaticDistribution.DomainName}
          TEMPLATES_PATH: /var/task/templates

  # VPC 网络配置
  MainVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16   # VPC CIDR 块
      EnableDnsHostnames: true  # 启用 DNS 主机名
      EnableDnsSupport: true    # 启用 DNS 支持
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-vpc
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # Internet 网关配置
  MainIGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-igw

  # 将 Internet 网关附加到 VPC
  AttachIGW:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MainVPC
      InternetGatewayId: !Ref MainIGW

  # 公共子网配置
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MainVPC
      CidrBlock: 10.0.1.0/24    # 子网 CIDR 块
      AvailabilityZone: !Select [0, !GetAZs '']  # 可用区选择
      MapPublicIpOnLaunch: true  # 自动分配公网 IP
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-public-1
        - Key: Type
          Value: Public

  # 私有子网 1 配置
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MainVPC
      CidrBlock: 10.0.2.0/24    # 子网 CIDR 块
      AvailabilityZone: !Select [0, !GetAZs '']  # 可用区选择
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-private-1
        - Key: Type
          Value: Private

  # 私有子网 2 配置
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MainVPC
      CidrBlock: 10.0.3.0/24    # 子网 CIDR 块
      AvailabilityZone: !Select [1, !GetAZs '']  # 可用区选择
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-private-2
        - Key: Type
          Value: Private

  # NAT 网关弹性 IP
  NatGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn: AttachIGW        # 依赖于 IGW 附加
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-nat-eip

  # NAT 网关配置
  MainNatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-nat

  # 公共路由表配置
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MainVPC
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-public-rt

  # 公共路由配置
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachIGW
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0  # 默认路由
      GatewayId: !Ref MainIGW

  # 公共子网路由表关联
  PublicSubnet1RouteTableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  # 私有路由表配置
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MainVPC
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-private-rt

  # 私有路由配置
  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0  # 默认路由
      NatGatewayId: !Ref MainNatGateway

  # 私有子网 1 路由表关联
  PrivateSubnet1RouteTableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable

  # 私有子网 2 路由表关联
  PrivateSubnet2RouteTableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  # API 安全组配置
  ApiSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${ProjectName}-${Environment}-api-sg
      GroupDescription: Security group for API Lambda function
      VpcId: !Ref MainVPC
      SecurityGroupEgress:      # 出站规则
        - IpProtocol: -1
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-api-sg

  # 数据库安全组配置
  DbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${ProjectName}-${Environment}-db-sg
      GroupDescription: Security group for Aurora PostgreSQL
      VpcId: !Ref MainVPC
      SecurityGroupIngress:     # 入站规则
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref ApiSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-db-sg

  # Aurora PostgreSQL 数据库集群配置
  DbCluster:
    Type: AWS::RDS::DBCluster
    DeletionPolicy: Retain      # 保留策略：防止意外删除
    Properties:
      DBClusterIdentifier: !Sub ${ProjectName}-${Environment}-db
      Engine: aurora-postgresql
      EngineMode: provisioned
      EngineVersion: 14.9
      DatabaseName: !Ref DBName
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      DBSubnetGroupName: !Ref DbSubnetGroup
      VpcSecurityGroupIds: 
        - !Ref DbSecurityGroup
      ServerlessV2ScalingConfiguration:  # Serverless v2 扩展配置
        MinCapacity: 0.5
        MaxCapacity: 16
      BackupRetentionPeriod: 7  # 备份保留期
      PreferredBackupWindow: 03:00-04:00
      PreferredMaintenanceWindow: Mon:04:00-Mon:05:00
      DeletionProtection: true  # 删除保护
      EnableHttpEndpoint: true
      Port: 5432
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-db
        - Key: Environment
          Value: !Ref Environment

  # 数据库实例配置
  DbInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBClusterIdentifier: !Ref DbCluster
      DBInstanceClass: db.serverless
      Engine: aurora-postgresql
      PubliclyAccessible: false
      Tags:
        - Key: Name
          Value: JapaneseStudyDBInstance

  # 数据库子网组配置
  DbSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupName: !Sub ${ProjectName}-${Environment}-db-subnet
      DBSubnetGroupDescription: !Sub ${ProjectName} ${Environment} database subnet group
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-db-subnet

  # S3 VPC 终端节点配置
  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref MainVPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      RouteTableIds:
        - !Ref PrivateRouteTable
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-s3-endpoint

  # S3 存储桶配置
  StaticBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub ${ProjectName}-${Environment}-static
      PublicAccessBlockConfiguration:  # 阻止公共访问配置
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:               # 存储桶加密配置
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      Tags:
        - Key: Name
          Value: !Sub ${ProjectName}-${Environment}-static
        - Key: Environment
          Value: !Ref Environment

  # CloudFront 源访问身份配置
  StaticOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub ${ProjectName}-${Environment}-oai
        
  # CloudFront 分发配置
  StaticDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        CustomErrorResponses:    # 自定义错误响应
          - ErrorCode: 403
            ResponsePagePath: /template/index.html
            ResponseCode: 200
            ErrorCachingMinTTL: 300
          - ErrorCode: 404
            ResponsePagePath: /template/index.html
            ResponseCode: 200
            ErrorCachingMinTTL: 300
        Origins:                # 源配置
          - DomainName: !GetAtt StaticBucket.RegionalDomainName
            Id: S3Origin
            OriginPath: "/template"
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${StaticOriginAccessIdentity}
          - DomainName: !Sub ${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com
            Id: ApiGatewayOrigin
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: https-only
              OriginSSLProtocols: [TLSv1.2]
        DefaultCacheBehavior:   # 默认缓存行为
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD, OPTIONS]
          CachedMethods: [GET, HEAD]
          Compress: true
          DefaultTTL: 86400
          MaxTTL: 31536000
          MinTTL: 3600
          SmoothStreaming: false
          ForwardedValues:
            QueryString: false
            Cookies: { Forward: none }
        CacheBehaviors:         # 自定义缓存行为
          - PathPattern: /api/*
            TargetOriginId: ApiGatewayOrigin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods: ["GET", "HEAD", "OPTIONS", "PUT", "POST", "PATCH", "DELETE"]
            CachedMethods: ["GET", "HEAD", "OPTIONS"]
            DefaultTTL: 0
            ForwardedValues:
              QueryString: true
              Cookies: { Forward: all }
              Headers: ["*"]
          - PathPattern: /static/*
            TargetOriginId: S3Origin
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods: [GET, HEAD, OPTIONS]
            DefaultTTL: 86400

  # S3 存储桶策略配置
  StaticBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref StaticBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${StaticOriginAccessIdentity}
            Action: s3:GetObject
            Resource: 
              - !Sub ${StaticBucket.Arn}/*
              - !Sub ${StaticBucket.Arn}/template/*
              - !Sub ${StaticBucket.Arn}/template/index.html

# 输出配置
Outputs:
  CloudFrontDomain:            # CloudFront 域名输出
    Description: CloudFront统一访问入口
    Value: !GetAtt StaticDistribution.DomainName
  ApiURL:                      # API Gateway URL 输出
    Description: API Gateway endpoint URL
    Value: !Sub https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/
  VpcId:                       # VPC ID 输出
    Description: VPC ID
    Value: !Ref MainVPC
  VpcName:                     # VPC 名称输出
    Description: VPC Name
    Value: !Sub ${ProjectName}-${Environment}-vpc
  DbEndpoint:                  # 数据库终端节点输出
    Description: Database Cluster Endpoint
    Value: !GetAtt DbCluster.Endpoint.Address
  DbPort:                      # 数据库端口输出
    Description: Database Port
    Value: !GetAtt DbCluster.Endpoint.Port
  DbName:                      # 数据库名称输出
    Description: Database Name
    Value: !Ref DBName
  Environment:                 # 环境输出
    Description: Deployment Environment
    Value: !Ref Environment
  StaticBucketName:           # S3 存储桶名称输出
    Description: S3 Bucket Name for Static Assets
    Value: !Ref StaticBucket
  CloudFrontDomain:           # CloudFront 域名输出
    Description: CloudFront Distribution Domain Name
    Value: !GetAtt StaticDistribution.DomainName
  StaticAssetsUrl:           # 静态资源 URL 输出
    Description: URL for Static Assets
    Value: !Sub https://${StaticDistribution.DomainName}
